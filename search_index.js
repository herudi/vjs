var searchModuleIndex = [
"README",
"vjs",
"web",
];

var searchIndex = [
"Atom",
"to_string",
"str",
"to_value",
"free",
"PropertyEnum",
"AtomValue",
"Context",
"any_to_val",
"call",
"call_this",
"dump_error",
"dup_context",
"end",
"eval",
"eval_file",
"eval_function",
"eval_module",
"free",
"js_array",
"js_array_buffer",
"js_await",
"js_big_int",
"js_big_uint",
"js_bool",
"js_class",
"js_dump",
"js_error",
"js_eval",
"js_eval_core",
"js_exception",
"js_float",
"js_function",
"js_function_this",
"js_global",
"js_i64",
"js_int",
"js_module",
"js_new_class",
"js_null",
"js_object",
"js_only_function",
"js_only_function_this",
"js_promise",
"js_string",
"js_throw",
"js_type_error",
"js_u32",
"js_undefined",
"js_uninitialized",
"json_parse",
"json_stringify",
"json_stringify_op",
"loop",
"new_atom",
"new_promise",
"runtime",
"Value",
"await",
"byte_len",
"call",
"callback",
"delete",
"dup_value",
"free",
"get",
"has",
"instanceof",
"is_array",
"is_big_decimal",
"is_big_float",
"is_big_int",
"is_bool",
"is_error",
"is_exception",
"is_function",
"is_null",
"is_number",
"is_object",
"is_string",
"is_symbol",
"is_undefined",
"is_uninitialized",
"json_stringify",
"len",
"new",
"property_names",
"set",
"str",
"to_bool",
"to_bytes",
"to_error",
"to_f64",
"to_i64",
"to_int",
"to_string",
"to_u32",
"typeof_name",
"ContextConfig",
"Runtime",
"free",
"is_job_pending",
"new_context",
"promise_rejection_tracker",
"run_gc",
"set_gc_threshold",
"set_max_stack_size",
"set_memory_limit",
"JSCFunction",
"JSFunctionThis",
"JSFunction",
"JSConstructor",
"ClassParams",
"Module",
"export",
"set",
"get",
"to_object",
"export_default",
"create",
"CallbackPromise",
"Promise",
"resolve",
"reject",
"JSError",
"msg",
"new_runtime",
"AnyValue",
"PropKey",
"JSValueConst",
"atob",
"atob_api",
"btoa",
"btoa_api",
"console_api",
"crypto_api",
"encoding_api",
"inject",
"timer_api",
"url_api",
"window_api",
];

var searchModuleData = [
["# VJS","index.html"],
["# VJS","vjs.html"],
["","web.html"],
];

var searchData = [
["vjs","Atom structure based on `JSAtom` in qjs and implemented into `ref`.","vjs.html#Atom","struct "],
["vjs","Convert Atom to string.","vjs.html#Atom.to_string","fn (Atom)"],
["vjs","Convert Atom to string.","vjs.html#Atom.str","fn (Atom)"],
["vjs","Convert Atom to Value. Example:","vjs.html#Atom.to_value","fn (Atom)"],
["vjs","Free Atom","vjs.html#Atom.free","fn (Atom)"],
["vjs","PropertyEnum structure based on `JSPropertyEnum` in qjs.","vjs.html#PropertyEnum","struct "],
["vjs","","vjs.html#AtomValue","type "],
["vjs","Context structure based on `JSContext` in qjs and implemented into `ref`.","vjs.html#Context","struct "],
["vjs","Convert any to value.","vjs.html#Context.any_to_val","fn (Context)"],
["vjs","Callback from Context","vjs.html#Context.call","fn (Context)"],
["vjs","Callback this from Context","vjs.html#Context.call_this","fn (Context)"],
["vjs","Dump std Error","vjs.html#Context.dump_error","fn (Context)"],
["vjs","Duplicate context","vjs.html#Context.dup_context","fn (Context)"],
["vjs","Context end","vjs.html#Context.end","fn (Context)"],
["vjs","Evaluate JS Example:","vjs.html#Context.eval","fn (Context)"],
["vjs","Evaluate File Example:","vjs.html#Context.eval_file","fn (Context)"],
["vjs","Evaluate Function","vjs.html#Context.eval_function","fn (Context)"],
["vjs","Evaluate JS module Example:","vjs.html#Context.eval_module","fn (Context)"],
["vjs","Free the context","vjs.html#Context.free","fn (Context)"],
["vjs","Create JS Array.","vjs.html#Context.js_array","fn (Context)"],
["vjs","Create JS ArrayBuffer.","vjs.html#Context.js_array_buffer","fn (Context)"],
["vjs","JS call await.","vjs.html#Context.js_await","fn (Context)"],
["vjs","Create JS Bigint.","vjs.html#Context.js_big_int","fn (Context)"],
["vjs","Create JS Big Uint.","vjs.html#Context.js_big_uint","fn (Context)"],
["vjs","Create JS Boolean.","vjs.html#Context.js_bool","fn (Context)"],
["vjs","Create JS Class Example:","vjs.html#Context.js_class","fn (Context)"],
["vjs","js dump IError.","vjs.html#Context.js_dump","fn (Context)"],
["vjs","create JS new Error.","vjs.html#Context.js_error","fn (Context)"],
["vjs","Evaluate JS with complete params Example: ctx.js_eval(code, filename, flag)!","vjs.html#Context.js_eval","fn (Context)"],
["vjs","Core evaluate JS","vjs.html#Context.js_eval_core","fn (Context)"],
["vjs","Create JS Exception. Example:","vjs.html#Context.js_exception","fn (Context)"],
["vjs","Create JS Float.","vjs.html#Context.js_float","fn (Context)"],
["vjs","JS Callback function Example:","vjs.html#Context.js_function","fn (Context)"],
["vjs","JS Callback function with `this` Example:","vjs.html#Context.js_function_this","fn (Context)"],
["vjs","Define JS Global (globalThis).","vjs.html#Context.js_global","fn (Context)"],
["vjs","Create JS int64.","vjs.html#Context.js_i64","fn (Context)"],
["vjs","Create JS Int.","vjs.html#Context.js_int","fn (Context)"],
["vjs","Initial `js_module`. Example:","vjs.html#Context.js_module","fn (Context)"],
["vjs","JS call new class.","vjs.html#Context.js_new_class","fn (Context)"],
["vjs","Create JS Null.","vjs.html#Context.js_null","fn (Context)"],
["vjs","Create JS Object.","vjs.html#Context.js_object","fn (Context)"],
["vjs","JS Callback only function","vjs.html#Context.js_only_function","fn (Context)"],
["vjs","JS Callback only function this","vjs.html#Context.js_only_function_this","fn (Context)"],
["vjs","Same as new_promise, but without callback.","vjs.html#Context.js_promise","fn (Context)"],
["vjs","Create JS String.","vjs.html#Context.js_string","fn (Context)"],
["vjs","JS Throw Error.","vjs.html#Context.js_throw","fn (Context)"],
["vjs","create JS new TypeError.","vjs.html#Context.js_type_error","fn (Context)"],
["vjs","Create JS u32.","vjs.html#Context.js_u32","fn (Context)"],
["vjs","Create JS Undefined.","vjs.html#Context.js_undefined","fn (Context)"],
["vjs","Create JS Uninitialized.","vjs.html#Context.js_uninitialized","fn (Context)"],
["vjs","Convert value string to `js_object`.","vjs.html#Context.json_parse","fn (Context)"],
["vjs","Convert value `js_object` to json string.","vjs.html#Context.json_stringify","fn (Context)"],
["vjs","Convert value `js_object` to json string with optionals.","vjs.html#Context.json_stringify_op","fn (Context)"],
["vjs","std loop form `qjs`","vjs.html#Context.loop","fn (Context)"],
["vjs","Create new Atom support `int` | `string`. Example:","vjs.html#Context.new_atom","fn (Context)"],
["vjs","Create new Promise. Example:","vjs.html#Context.new_promise","fn (Context)"],
["vjs","Get runtime from context","vjs.html#Context.runtime","fn (Context)"],
["vjs","Value structure based on `JSValue` in qjs and implemented into `ref`.","vjs.html#Value","struct "],
["vjs","Awaited from Promise Example:","vjs.html#Value.await","fn (Value)"],
["vjs","byteLength value","vjs.html#Value.byte_len","fn (Value)"],
["vjs","Call fn. Example:","vjs.html#Value.call","fn (Value)"],
["vjs","Callback function self Example:","vjs.html#Value.callback","fn (Value)"],
["vjs","Delete property Example:","vjs.html#Value.delete","fn (Value)"],
["vjs","Duplicate value","vjs.html#Value.dup_value","fn (Value)"],
["vjs","Free Value","vjs.html#Value.free","fn (Value)"],
["vjs","Get property Example:","vjs.html#Value.get","fn (Value)"],
["vjs","Has property Example:","vjs.html#Value.has","fn (Value)"],
["vjs","Check value with instanceof. Example: assert val.instanceof('Promise') == true","vjs.html#Value.instanceof","fn (Value)"],
["vjs","Check value is array.","vjs.html#Value.is_array","fn (Value)"],
["vjs","Check value is big decimal.","vjs.html#Value.is_big_decimal","fn (Value)"],
["vjs","Check value is bigfloat.","vjs.html#Value.is_big_float","fn (Value)"],
["vjs","Check value is bigint.","vjs.html#Value.is_big_int","fn (Value)"],
["vjs","Check value is boolean.","vjs.html#Value.is_bool","fn (Value)"],
["vjs","Check value is error.","vjs.html#Value.is_error","fn (Value)"],
["vjs","Check value is exception.","vjs.html#Value.is_exception","fn (Value)"],
["vjs","Check value is function.","vjs.html#Value.is_function","fn (Value)"],
["vjs","Check value is null.","vjs.html#Value.is_null","fn (Value)"],
["vjs","Check value is number.","vjs.html#Value.is_number","fn (Value)"],
["vjs","Check value is object.","vjs.html#Value.is_object","fn (Value)"],
["vjs","Check value is string.","vjs.html#Value.is_string","fn (Value)"],
["vjs","Check value is symbol.","vjs.html#Value.is_symbol","fn (Value)"],
["vjs","Check value is undefined.","vjs.html#Value.is_undefined","fn (Value)"],
["vjs","Check value is uninitialized.","vjs.html#Value.is_uninitialized","fn (Value)"],
["vjs","Convert Value object to `V` string json","vjs.html#Value.json_stringify","fn (Value)"],
["vjs","Length value","vjs.html#Value.len","fn (Value)"],
["vjs","New from classes Example:","vjs.html#Value.new","fn (Value)"],
["vjs","arrays property_names `[]PropertyEnum`. Example:","vjs.html#Value.property_names","fn (Value)"],
["vjs","Set property Example:","vjs.html#Value.set","fn (Value)"],
["vjs","Convert Value to `V` String","vjs.html#Value.str","fn (Value)"],
["vjs","Convert Value to `V` bool","vjs.html#Value.to_bool","fn (Value)"],
["vjs","Convert Value to `V` []u8","vjs.html#Value.to_bytes","fn (Value)"],
["vjs","Convert Value to `V` JSError","vjs.html#Value.to_error","fn (Value)"],
["vjs","Convert Value to `V` f64","vjs.html#Value.to_f64","fn (Value)"],
["vjs","Convert Value to `V` i64","vjs.html#Value.to_i64","fn (Value)"],
["vjs","Convert Value to `V` int","vjs.html#Value.to_int","fn (Value)"],
["vjs","Convert Value to `V` String","vjs.html#Value.to_string","fn (Value)"],
["vjs","Convert Value to `V` u32","vjs.html#Value.to_u32","fn (Value)"],
["vjs","Check typeof name value.","vjs.html#Value.typeof_name","fn (Value)"],
["vjs","ContextConfig structure params.","vjs.html#ContextConfig","struct "],
["vjs","Runtime structure based on `JSRuntime` in qjs and implemented into `ref`.","vjs.html#Runtime","struct "],
["vjs","Free runtime","vjs.html#Runtime.free","fn (Runtime)"],
["vjs","Check if job is pending","vjs.html#Runtime.is_job_pending","fn (Runtime)"],
["vjs","Create new Context from `Runtime`. Example:","vjs.html#Runtime.new_context","fn (Runtime)"],
["vjs","Promise rejection tracker (default true)","vjs.html#Runtime.promise_rejection_tracker","fn (Runtime)"],
["vjs","Run qjs garbage collector","vjs.html#Runtime.run_gc","fn (Runtime)"],
["vjs","Set gc threshold.","vjs.html#Runtime.set_gc_threshold","fn (Runtime)"],
["vjs","Set maximum stack size. (default to 255)","vjs.html#Runtime.set_max_stack_size","fn (Runtime)"],
["vjs","Set limit memory. (default to unlimited)","vjs.html#Runtime.set_memory_limit","fn (Runtime)"],
["vjs","Original `type` JS Callback function from `qjs`","vjs.html#JSCFunction","type "],
["vjs","`type` JS Callback function with `this`","vjs.html#JSFunctionThis","type "],
["vjs","`type` JS Callback function","vjs.html#JSFunction","type "],
["vjs","`type` Constructor Class function","vjs.html#JSConstructor","type "],
["vjs","","vjs.html#ClassParams","struct "],
["vjs","Module structure.","vjs.html#Module","struct "],
["vjs","Export module. Example:","vjs.html#Module.export","fn (Module)"],
["vjs","Same as Export.","vjs.html#Module.set","fn (Module)"],
["vjs","Get value from export/set.","vjs.html#Module.get","fn (Module)"],
["vjs","Convert module to JS object.","vjs.html#Module.to_object","fn (Module)"],
["vjs","Export default. Example:","vjs.html#Module.export_default","fn (Module)"],
["vjs","Create module. Example:","vjs.html#Module.create","fn (Module)"],
["vjs","`type` Callback JS Promise.","vjs.html#CallbackPromise","type "],
["vjs","Promise structure.","vjs.html#Promise","struct "],
["vjs","Promise resolve","vjs.html#Promise.resolve","fn (Promise)"],
["vjs","Promise reject","vjs.html#Promise.reject","fn (Promise)"],
["vjs","JSError structure.","vjs.html#JSError","struct "],
["vjs","lookup/print JSError message.","vjs.html#JSError.msg","fn (JSError)"],
["vjs","Create new Runtime. Example:","vjs.html#new_runtime","fn "],
["vjs","`type` Anything Value in `vjs`","vjs.html#AnyValue","type "],
["vjs","`type` property keys. to use get/set values.","vjs.html#PropKey","type "],
["vjs","`type` JSValueConst. this type is free.","vjs.html#JSValueConst","type "],
["web","Atob. this is return js_function value.","web.html#atob","fn "],
["web","Add atob to globals. Example:","web.html#atob_api","fn "],
["web","Btoa. this is return js_function value.","web.html#btoa","fn "],
["web","Add btoa to globals. Example:","web.html#btoa_api","fn "],
["web","Add console to globals. Example:","web.html#console_api","fn "],
["web","Add Crypto API to globals. Example:","web.html#crypto_api","fn "],
["web","Add encoding API to globals (`TextEncoder`, `TextDecoder`). Example:","web.html#encoding_api","fn "],
["web","Inject All Web-API features. Example:","web.html#inject","fn "],
["web","Add timer API to globals (`setTimeout`, `setInterval`, `clearTimeout`, `clearInt","web.html#timer_api","fn "],
["web","Add URL API to globals (`URL`, `URLSearchParams`). Example:","web.html#url_api","fn "],
["web","Add Window API to globals. same as globalThis. Example:","web.html#window_api","fn "],
];

